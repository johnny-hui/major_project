from utility.constants import NODE_INIT_MSG, NODE_INIT_SUCCESS_MSG
from utility.ec_keys_utils import generate_keys
from utility.node_init import parse_arguments, initialize_socket


class Node:
    """
    A class representing a P2P Node.

    Attributes:
        ip - The ip address
        port - The port number
        name - The name of the server
        own_socket - The socket object for the server
        pvt_key - The private key generated by ECDH (via. brainpoolP256r1)
        pub_key - The public key generated by ECDH (via. brainpoolP256r1)
        fd_list - A list of file descriptors to monitor (using select() function)
        client_dict - A dictionary containing information about each connected client{IP: (name, shared secret key, IV)}
        terminate - A boolean flag that determines if the server should terminate
    """
    def __init__(self):
        print(NODE_INIT_MSG)
        self.name, self.ip, self.port = parse_arguments()
        self.own_socket = initialize_socket(self.ip, self.port)
        self.pvt_key, self.pub_key = generate_keys()
        self.fd_list = [self.own_socket]  # => Monitored by select()
        self.client_dict = {}  # Format {IP: [name, shared_secret, IV, cipher mode, cipher object]}
        self.terminate = False
        print(NODE_INIT_SUCCESS_MSG)
